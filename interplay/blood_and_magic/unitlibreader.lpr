program unitlibreader;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  SysUtils, Classes, bmfile, spriteutils
  { you can add units after this };
{
   0    1    2    3    4   5     6    7   8    9    10   11   12   13   14   15    16   17  18   19   20   21   22   23   24   25    26   27  28   29   30   31
                                            ||
023C 023B 023A 0239 0238 0237 0236 0235 02C2 3302 3202 3102 3002 2F02 2E02 2D02 0F00 0E00 0D00 0C00 0B00 0A00 0900 B201 B101 0600 0500 0400 0300 0200 0100 0000
024C 024B 024A 0249 0248 0247 02D9 02DA 02C3 4302 4202 4102 4002 3F02 3E02 3D02 1F00 1E00 1D00 1C00 1B00 1A00 1900 B301 1700 1600 1500 1400 1300 1200 1100 1000
025C 025B 025A 0259 0258 0257 02DB 02DC 02C6 C902 5202 5102 5002 4F02 4E02 4D02 2E00 2D00 2C00 2B00 2A00 2900 B501 B401 2700 2600 2500 D102 D202 2200 2100 2000
026C 026B 026A 0269 02CB 0267 0266 0265 0264 CA02 6202 6102 6002 5F02 5E02 5D02 3D00 3C00 3B00 3A00 3900 3800 B601 3700 3600 3500 3400 D302 D402 3100 3000 2F00
027C 027B 027A 0279 0278 0277 02CC 0275 0274 7302 7202 7102 7002 6F02 6E02 6D02 4C00 4B00 4A00 4900 4800 4700 B701 4600 4500 4400 4300 4200 4100 4000 8303 3E00
020C 020B 020A 0209 0208 0197 0207 0197 030D 0602 0502 0402 0302 6700 6600 0202 9703 5A00 5900 5800 5700 B801 5600 5500 5400 5300 5200 5100 5000 4F00 8403 4D00
0219 0218 0217 0216 0215 00D3 00BD 00B7 0214 1302 1202 1102 1002 0F02 0E02 0D02 6700 6700 6600 6500 BA01 B901 6400 6300 6200 6100 6000 5E00 5F00 5E00 5D00 5C00
0223 0222 00BE 00BD 0221 0220 00BE 00BD 00CA D000 1F02 1E02 1D02 1C02 1B02 1A02 7500 7400 7300 7200 7100 7000 6F00 6E00 6D00 6C00 6700 6700 6B00 6A00 6900 6800

00B9 00BE 00BD 00BE 00BD 00BE 00BD 00CA 00D0 BE00 BD00 2602 9701 AD00 2502 2402 7F00 BC01 BB01 7E00 7D00 7C00 5E00 6D00 7B00 7A00 7900 7800 7700 7600 6000 B602
01DC 00BD 00BE 00BD 00BE 022B 00CA 00D0 00BE BD00 2A02 2902 AD00 9701 2802 2702 BE01 BD01 8700 8600 B502 8400 B402 B302 8200 8100 4D00 B202 B102 B002 6000 AF02
00D7 01DC 00BD 01DB 0198 01DA 019C 01D9 00BD BE00 C001 AD00 9701 AD00 D801 D701 9200 9100 9000 8F00 8E00 8D00 C002 BF02 8C00 BE02 B902 8B00 B802 8900 B702 8503
0199 00D7 0199 00D7 01E4 01E3 01E2 01E1 01E0 BD00 9B01 9701 AD00 DF01 DE01 DD01 A000 9F00 9E00 9D00 9C00 9B00 9A00 9900 9800 9700 6800 9600 9500 9400 6000 8603
00D7 0199 00D7 01F0 01EF 01EE 01ED 01EC 01EB EA01 E901 E801 E701 E601 E501 AD00 9701 AD00 AC00 AB00 AA00 A900 A800 A700 A600 A500 3D00 A400 A300 A200 A100 5B00
0199 00D7 01FB 01FA 01F9 01F8 019E 01F7 01F6 F501 F401 F301 F201 F101 AD00 9701 AD00 9701 AD00 B900 B800 D300 B700 B600 B500 B400 B300 B200 B100 B000 AF00 AE00
00D7 0201 0200 01FF 00BD 00BE 00D1 00C7 01C0 AD00 FE01 FD01 FC01 AD00 9701 AD00 9701 AD00 B900 BE00 BD00 BE00 BD00 B700 BC00 BB00 BA00 8A00 6100 6000 F202 5D00
01C4 01C3 01C2 00BD 00BE 01C1 00BE 019C 00BE C001 AD00 9701 AD00 ED02 AD00 B900 CE01 CF01 BE00 BD00 BE00 BD00 BE00 BD00 B700 9701 B500 C000 7B00 BF00 AE02 5D00
-                                           /-
C801 C701 D700 9901 9801 BE00 BD00 D100 C900 C700 A501 AD00 9701 AD00 B900 BE00 BD00 BE00 BD00 CA00 C800 C900 C800 C700 BD00 B700 C600 C500 C400 C300 C200 C100
CD01 D700 9901 D700 9901 9801 BE00 BD00 BE00 9E01 BE00 F402 F502 F302 BE00 BD00 CA00 C800 C900 D000 BE00 BD00 BE00 D100 C900 C800 D000 CF00 CE00 CD00 CC00 CB00
D700 9901 D700 9901 A101 BE00 BD00 BE00 BD00 9C01 CF01 BE00 BD00 CA00 C900 C800 D000 BE00 BD00 BE00 D600 D500 D500 D500 D400 BE00 BD00 BE00 B800 D300 D200 D200
9901 D601 9901 A101 BD00 BD00 BE00 BD00 CA00 D000 BE00 BD00 CA00 D000 A601 AB01 BE00 D600 D500 DD00 D900 DC00 DB00 DA00 D900 D800 D500 D400 BE00 B001 9901 D700
D700 9901 D700 8801 BD00 BE00 BD00 BE00 A801 C800 C900 C800 A701 A601 A501 2F01 DD00 D900 E100 E200 E100 E200 E400 E300 E100 E200 E100 DE00 E000 DF00 DE00 D800
9901 D700 9901 9801 C101 BD00 BE00 CA00 D000 BD00 A601 AB01 AA01 A901 2A01 FB00 E600 E500 E200 E100 E200 E100 E200 E100 E200 E100 E200 E100 E200 E100 E200 E100
D700 AE01 9801 BE00 BD00 BE00 CA00 D000 BD00 9B01 EF02 9101 E200 D900 AD01 E100 ED00 EC00 E100 D900 D800 EB00 E100 EA00 E100 E900 E100 E200 E100 E200 E800 E700
9901 9801 BE00 CA00 C800 C900 D000 BD00 A601 A501 9701 2101 E100 2E01 E100 E200 F800 F700 E200 F600 F500 F400 F300 F200 0B01 F100 F000 E100 E200 E100 EF00 EE00
(finished with $2F18)
---
D700 8801 BD00 9E01 BD00 BE00 BD00 A601 A501 9701 EF02 F400 E200 AF01 4D01 E100 E100 E200 E100 D900 D800 FB00 E100 E200 E100 E200 E100 E200 E100 E200 E100 E200
9901 9801 BE00 D100 C700 BD00 B700 AD00 9701 2A01 D500 FB00 E100 9601 9501 E200 0401 0301 E200 0201 0101 8903 E200 0001 E102 E202 E200 E100 E200 FD00 FC00 E100
D700 9901 9801 BE00 9C01 BE00 BD00 9B01 EF02 F400 6B01 E100 E200 E100 9A01 E100 1001 0F01 0E01 0D01 E100 8A03 E100 E200 E302 E402 E100 0801 0701 0601 E100 0501
9901 D700 9901 BD00 9E01 BD00 9B01 EF02 2A01 FB00 E100 E200 A001 E200 E100 E200 E200 E100 E200 E100 E200 8B03 8C03 E100 E200 E100 E200 1401 1301 E100 1201 1101
D700 A101 CA00 C900 D000 BE00 BD00 A001 2101 6001 E200 0201 9F01 E100 8703 E700 E100 2001 1F01 E200 E100 1E01 1D01 1C01 1B01 1A01 1901 1801 E100 E200 1701 F400
9901 9801 A300 BD00 BE00 BD00 BE00 A401 F400 A301 E100 5E01 5B01 E200 E100 8803 E200 E100 E200 2701 2601 D600 D500 D500 D500 D500 D400 2501 2401 2301 2201 2101
D700 9801 BE00 BD00 BE00 2A01 D500 D500 FB00 E200 E100 3801 E200 E100 E200 E100 E100 2701 2601 2A01 DD00 D900 DD02 DE02 E200 E100 D900 D800 D500 D500 D500 FB00
9901 2F01 D500 D500 D500 FB00 FA00 F900 E200 E100 7B01 8A01 E100 E200 8901 E200 2601 2F01 D500 FB00 E100 E200 DF02 E002 E100 E200 E100 2B01 E200 E200 E100 E200
-------------
-------------
D800 FB00 E100 DC00 E100 7201 E100 E200 E100 E200 5F01 E100 E200 2701 2401 2601 2F01 FB00 8D03 E100 E200 E100 E200 E200 3501 3401 E200 3301 3201 3101 3001 E100
8E01 8D01 E200 E100 E200 8C01 E200 8401 8301 E200 E100 2701 8B01 D600 D500 D500 FB00 4001 8E03 E200 E100 E200 E100 3D01 3C01 3B01 E100 E200 3A01 3901 E100 E200
F800 F700 9401 9301 E100 E200 E100 9201 6101 E100 1201 9101 9001 D900 8F01 E100 E200 DC00 E200 E100 E200 E100 E200 E100 E200 4401 E200 4301 4201 4101 E200 E100
6801 E100 6F01 6E01 E200 E100 6D01 6C01 6B01 1201 2A01 FB00 E100 E200 6A01 E200 E100 E200 E100 4B01 4A01 E200 E100 4901 E100 4801 E100 4701 4601 4501 E100 E200
6303 6403 6503 6603 E100 E200 E100 E200 7201 1701 F400 7101 7001 E100 E200 E100 5501 5401 E200 E100 5301 E100 5201 5101 5001 4F01 E200 4E01 4D01 E100 E200 4C01
6703 6803 6903 6A03 E200 7601 E200 E100 9103 1201 1101 7401 7301 E200 E100 E200 E100 9403 9503 E200 E100 E200 E100 5A01 5901 E200 E100 5801 E100 E200 5701 5601
6B03 6C03 6D03 6E03 E100 E200 E100 7D01 5B01 1701 F400 7C01 E200 E100 9203 9303 E200 E100 E200 E100 E200 6001 E200 E100 E200 E100 E200 E100 E200 9603 5D01 E100
6F03 7003 7103 7203 E200 8401 8301 D800 D500 D500 FB00 8201 8101 E200 E100 E200 E100 6701 6601 E200 6501 6401 E100 6301 6201 E200 E100 E200 E100 E200 E100 E200
-------------
something else starts at:
0x03328
}
procedure ReadUnitLib(const fn: string);
var
  fs : TFileStream;
  n  : TUnitLibEntryInfo;
  i  : integer;
begin
  fs := TFileStream.Create(fn, fmOpenRead or fmShareDenyNone);
  try
    for i := 0 to 129 do begin
      fs.Read(n, sizeof(n));
      if n.descr<>'' then
        writeln(n.descr);
    end;
  finally
    fs.Free;
  end;
end;

procedure ReadMap(const unitsfn, tilesfn: string; mapW: integer = 32; mapH: integer = 40);
var
  fs      : TFileStream;
  buf     : array of byte;
  map     : array of word;
  h       : TTileHeader;
  i, mi   : integer;
  sa      : TSpriteAlign;
  sp      : TSpriteAlignPos;
begin
  fs:=TfileStream.Create(unitsfn, fmOpenRead or fmShareDenyNone);
  try
    fs.Position:=$2928;
    SetLength(map, mapW * mapH);
    fs.Read(map[0], length(map)*2);
  finally
    fs.Free;
  end;

  sa := TSpriteAlign.Create;
  fs:=TfileStream.Create(tilesfn, fmOpenRead or fmShareDenyNone);
  try
    fs.Read(h, sizeof(h));
    SetLength(buf, sizeof(TTile)*h.count1);
    fs.Position:=fs.size {%H-}- sizeof(TTile)*h.count1;
    fs.Read(buf[0], sizeof(TTile)*h.count1);
    for i := 0 to length(map)-1 do begin
      mi:=map[i];
      if (i mod mapW) = 0 then writeln;
      write(' ', mi );
      sp := sa.AddSpriteWithOfs(TileWidth, TileHeight, mi*sizeof(TTile)+13);
      sp.targetX:=(i mod mapW)*TileWidth;
      sp.targetY:=(i div mapW)*TileHeight;
    end;
    SpritesAlignToBmpFile(sa, buf, DefaultPalette, $fe, ChangeFileExt('map_'+unitsfn,'.bmp'));
  finally
    sa.Free;
    fs.Free;
  end;
end;

begin
  if ParamCount=0 then begin
    writeln('please specify unit libe file type 19');
    Exit;
  end;

  if ParamCount=1 then
    ReadUnitLib(ParamStr(1))
  else
    ReadMap(ParamStr(1), ParamStr(2));


end.

